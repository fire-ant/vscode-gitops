{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "kind create cluster",
      "type": "shell",
      "command": "./kind/cluster_up.sh"
    },
    {
      "label": "kind delete cluster",
      "type": "shell",
      "command": "kind delete clusters ${CLUSTER_NAME}"
    },
    {
      "label": "k3d create cluster",
      "type": "shell",
      "command": "./k3d/cluster_up.sh ${CNI}",
    },
    {
      "label": "k3d delete cluster",
      "type": "shell",
      "command": "k3d cluster delete ${CLUSTER_NAME}"
    },
    {
      "label": "CNI install calico",
      "type": "shell",
      "command": "curl -sSL https://k3d.io/v5.3.0/usage/advanced/calico.yaml | kubectl apply -f -"
    },
    {
      "label": "k3d install cert-manager",
      "type": "shell",
      "command": "curl -sSL https://github.com/cert-manager/cert-manager/releases/download/v1.5.3/cert-manager.yaml | kubectl apply -f -"
    },
    {
      "label": "gitops enable",
      "type": "shell",
      "command": "flux check --pre; flux install --context=k3d-${CLUSTER_NAME}; kubectl get GitRepository -A -o json; kubectl get HelmRepository -A -o json; kubectl get Bucket -A -o json ;kubectl get HelmRelease -A -o json; kubectl get Kustomization -A -o json"
    },
    {
      "label": "clusterctl init CAPD",
      "type": "shell",
      "command": "./capd/init.sh",
      "options": {
        "cwd": "${workspaceFolder}/provider"
      },
    },
    {
      "label": "clusterctl setup CAPD",
      "type": "shell",
      "command": "./capd/setup.sh",
      "options": {
        "cwd": "${workspaceFolder}/provider"
      },
    },
    {
      "label": "clusterctl generate CAPD tenant",
      "type": "shell",
      "command": "./capd/generate.sh",
      "options": {
        "cwd": "${workspaceFolder}/provider"
      },
    },
    {
      "label": "clusterctl provision CAPD tenant",
      "type": "shell",
      "command": "./capd/provision.sh",
      "options": {
        "cwd": "${workspaceFolder}/provider"
      },
      "presentation": {
        "group": "groupA"
      },
    },
    {
      "label": "CNI add-on CAPD tenant",
      "type": "shell",
      "command": "./capd/add-on.sh",
      "options": {
        "cwd": "${workspaceFolder}/provider"
      },
      "presentation": {
        "group": "groupA"
      },
    },
    {
      "label": "kubectl get m",
      "type": "shell",
      "command": "watch kubectl get machines",
      "presentation": {
        "group": "groupA"
      }
    },
    {
      "label": "clusterctl CAPA",
      "type": "shell",
      "command": "clusterctl init --infrastructure aws"
    },
    // {
    //   "label": "k3d up CAPI/CAPD",
    //   "type": "shell",
    //   "command": "kubectl get no; kubectl get po --all-namespaces",
    //   "runOptions": {
    //     "runOn": "folderOpen"
    //   },
    //   "dependsOn": [
    //     "k3d delete cluster",
    //     "k3d create cluster",
    //     "k3d install calico",
    //     "k3d install cert-manager",
    //     "clusterctl setup CAPD",
    //     "clusterctl init CAPD"
    //   ],
    //   "dependsOrder": "sequence"
    // },
    {
      "label": "CNI install scope",
      "type": "shell",
      "command": "kubectl apply -f manifests/scope.yaml; kubectl wait --for=jsonpath='{.status.phase}'=Running pod $(kubectl get po -n weave -l name=weave-scope-app --output=jsonpath={.items..metadata.name}) -n weave; kubectl port-forward -n weave pod/$(kubectl get po -n weave -l name=weave-scope-app --output=jsonpath={.items..metadata.name}) 4040"
    },
    {
      "label": "CNI install weave-net",
      "type": "shell",
      "command": "kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')\""
    },
    {
      "label": "WGC ui run",
      "type": "shell",
      "command": "gitops ui run &"
    }
  ]
}